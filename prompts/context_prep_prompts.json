{
  "prompts": [
    {
      "name": "debug_workflow",
      "description": "Complete workflow for debugging an issue with context preparation",
      "arguments": [
        {
          "name": "issue_description",
          "description": "Description of the issue to debug",
          "required": true
        },
        {
          "name": "project_path",
          "description": "Path to the project (defaults to current directory)",
          "required": false
        }
      ]
    },
    {
      "name": "feature_implementation",
      "description": "Prepare context for implementing a new feature",
      "arguments": [
        {
          "name": "feature_description",
          "description": "Description of the feature to implement",
          "required": true
        },
        {
          "name": "project_path",
          "description": "Path to the project",
          "required": false
        }
      ]
    },
    {
      "name": "code_review",
      "description": "Prepare context for code review",
      "arguments": [
        {
          "name": "pr_description",
          "description": "Description of the changes to review",
          "required": true
        }
      ]
    },
    {
      "name": "performance_analysis",
      "description": "Prepare context for performance optimization",
      "arguments": [
        {
          "name": "performance_issue",
          "description": "Description of the performance problem",
          "required": true
        }
      ]
    },
    {
      "name": "notes_first",
      "description": "Guided workflow for creating notes before context",
      "arguments": [
        {
          "name": "task_title",
          "description": "Short title for the task",
          "required": true
        },
        {
          "name": "objectives",
          "description": "Bullet points of what you're trying to achieve",
          "required": true
        }
      ]
    }
  ],
  "templates": {
    "debug_workflow": {
      "content": "# Debug Workflow: {{issue_description}}\n\n## Instructions for Preparing Debug Context\n\nI need to debug an issue: {{issue_description}}\n\nPlease follow this systematic approach:\n\n### Step 1: Setup Project (First Time Only)\n1. Run `analyze_project_structure` to understand the project\n2. Run `update_tree_ignore(action='auto')` to configure ignore patterns\n\n### Step 2: Create Debug Notes\n1. Use `create_debug_notes` to save error logs, timeline, and analysis\n2. Save to `.llm_prep_notes/issue_{{timestamp}}.md`\n\n### Step 3: Prepare Context (Two-Phase)\n\n**Phase 1 - Dry Run:**\nUse `prepare_context` with `dry_run=true` to preview:\n- files: Relative paths to relevant code files (e.g., 'src/app.py')\n- context_dumps: Your .md notes as structured sections\n- general_note_files: Additional .md files for the end\n- tree_max_depth: 3 (default) or 4-5 for deeper trees\n\n**Phase 2 - Generate:**\nAfter confirming the preview, run again with `dry_run=false`\n\n### Step 4: Review and Upload\n1. Document saved to `context_reports/`\n2. Check the output summary for what was included\n3. Upload to Claude.ai for deep analysis\n\n**Tips:**\n- Always use relative paths (e.g., 'kre/celery.py' not '/kre/celery.py')\n- Tree doesn't support '!' negation - include files via context_dumps instead\n- Use `get_server_limits` to check size constraints\n\nLet's start by understanding the error better. Can you show me the error messages and logs?"
    },
    "feature_implementation": {
      "content": "# Feature Implementation: {{feature_description}}\n\n## Instructions for Preparing Feature Context\n\nI need to implement: {{feature_description}}\n\n### Step 1: Create Requirements Notes (.md)\n1. Create markdown files with specifications, user stories, acceptance criteria\n2. Save using `create_debug_notes` to `.llm_prep_notes/feature_requirements.md`\n\n### Step 2: Prepare Context\nUse `prepare_context` with:\n- files: relevant code files with notes about their role\n- context_dumps: requirements and design documents you created\n- general_note_files: any additional narrative notes\n- Output: `feature_{{feature_name}}_context.md`\n\n### Step 3: Upload and Implement\nThe context document will help:\n1. Plan the implementation approach\n2. Ensure consistency with existing code\n3. Upload to Claude.ai for implementation guidance\n\nWhat are the key requirements for this feature?"
    },
    "code_review": {
      "content": "# Code Review Context: {{pr_description}}\n\n## Preparing Context for Code Review\n\nChanges to review: {{pr_description}}\n\n### Step 1: Document Changes\nCreate a summary of changes:\n1. List all modified files\n2. Describe the purpose of each change\n3. Note any breaking changes or migrations needed\n4. Save to `.llm_prep_notes/review_changes.md`\n\n### Step 2: Gather Changed Files\nCollect all files that were:\n- Added (with note 'New file')\n- Modified (with note 'Modified - describe changes')\n- Related but unchanged (with note 'Context - related to changes')\n\n### Step 3: Include Test Coverage\nAdd test files:\n- New tests added\n- Modified tests\n- Tests that verify the changes\n\n### Step 4: Create Review Context\nUse `prepare_context` with:\n- All changed files\n- Change summary as context dump\n- Related documentation\n- Output: `review_{{pr_number}}_context.md`\n\n### Step 5: Review Checklist\nThe context will help review:\n- Code quality and standards\n- Test coverage\n- Performance implications\n- Security considerations\n- Documentation updates\n\nWhich files were changed in this PR?"
    },
    "performance_analysis": {
      "content": "# Performance Analysis: {{performance_issue}}\n\n## Preparing Context for Performance Optimization\n\nPerformance issue: {{performance_issue}}\n\n### Step 1: Performance Metrics\nDocument the performance problem:\n1. Current performance metrics\n2. Expected/target performance\n3. When the issue occurs (load, specific operations, etc.)\n4. Profiling data if available\n5. Save to `.llm_prep_notes/performance_metrics.md`\n\n### Step 2: Identify Bottlenecks\nGather files related to:\n- Slow operations or endpoints\n- Database queries\n- Algorithm implementations\n- Caching logic\n- Configuration affecting performance\n\n### Step 3: System Context\nInclude:\n- System architecture documentation\n- Current optimization attempts\n- Infrastructure configuration\n- Related monitoring/logging\n\n### Step 4: Generate Analysis Context\nUse `prepare_context` with:\n- Performance-critical files\n- Metrics documentation as context dump\n- Architecture diagrams if available\n- Output: `perf_analysis_{{issue}}_context.md`\n\n### Step 5: Optimization Strategy\nThe context will help:\n1. Identify optimization opportunities\n2. Evaluate different approaches\n3. Predict impact of changes\n4. Plan implementation\n\nWhat specific performance metrics are you seeing?"
    },
    "notes_first": {
      "content": "# Notes-First Workflow: {{task_title}}\n\n## Objectives:\n{{objectives}}\n\n## Step 1: Create Your Notes\n\nI'll help you create structured notes first. Use `create_debug_notes` with:\n```\nproject_path: \"[your project path]\"\nfilename: \"{{task_title}}_notes.md\"\ncontent: \"[your markdown content]\"\n```\n\n## Step 2: Ready-to-Use Context Template\n\nOnce your notes are saved, here's your `prepare_context` template:\n\n```json\n{\n  \"project_path\": \"[your project path]\",\n  \"dry_run\": true,\n  \"output_name\": \"{{task_title}}_context.md\",\n  \"files\": [\n    {\"path\": \"src/main.py\", \"note\": \"Entry point\"},\n    {\"path\": \"config/settings.py\", \"note\": \"Configuration\"}\n  ],\n  \"context_dumps\": [\n    {\"file\": \".llm_prep_notes/{{task_title}}_notes.md\", \"title\": \"Analysis Notes\"}\n  ],\n  \"general_note_files\": [\n    \".llm_prep_notes/additional_notes.md\"\n  ],\n  \"tree_max_depth\": 3\n}\n```\n\n## Step 3: Two-Phase Execution\n\n1. **Preview**: Run with `dry_run: true` to verify what will be included\n2. **Generate**: If preview looks good, run with `dry_run: false`\n\n## Tips:\n- Replace placeholder paths with your actual relative paths\n- Add/remove files as needed for your specific task\n- Adjust tree_max_depth if you need deeper directory structure\n\nWhat information would you like to capture in your notes?"
    }
  },
  "instructions": {
    "general": "## LLM Context Preparation MCP Server\n\nThis MCP server helps you prepare comprehensive context documents for uploading to Claude.ai or other web-based LLM interfaces when dealing with complex issues that exceed token limits.\n\n### Key Concepts\n\n1. **Two-Stage Process**: \n   - First, create detailed notes/documentation\n   - Then, generate comprehensive context documents\n\n2. **Organization**:\n   - Debug notes go in `.llm_prep_notes/`\n   - Context documents go in `context_reports/`\n   - Project config saved in `.llm_prep_config.json`\n\n3. **Best Practices**:\n   - Always create notes BEFORE generating context\n   - Include error logs as context dumps (not inline)\n   - Add descriptive notes to each file\n   - Use meaningful output filenames with dates\n\n### Available Tools\n\n- `prepare_context`: Main tool for generating context documents\n- `create_debug_notes`: Create markdown notes for context dumps\n- `set_project_config`: Configure project settings\n- `list_recent_contexts`: See recently generated contexts\n- `clean_temp_notes`: Clean up old temporary notes\n\n### Typical Workflow\n\n1. Understand the problem\n2. Create detailed notes/logs\n3. Identify relevant files\n4. Generate context document\n5. Upload to web LLM for analysis",
    "tips": [
      "Always use paths relative to project root (e.g., 'kre/celery_app.py')",
      "Run analyze_project_structure â†’ update_tree_ignore(action='auto') before first prepare",
      "Compose context as: files (full source) + context_dumps (.md docs) + general_note_files (.md narrative at end)",
      "Use dry_run=true first to verify inclusions",
      "tree -I has no '!' negation; include files via context_dumps/general_note_files instead of tree tricks",
      "For large error logs (100+ lines), always use create_debug_notes first",
      "Include configuration files when debugging runtime issues",
      "Add test files to understand expected behavior",
      "Use descriptive notes for each file to explain its relevance",
      "Keep context documents under 2MB for best performance",
      "Archive old context reports periodically",
      "Use project config to set default ignore patterns",
      "tree_max_depth=3 default; raise to 4-5 if tree is too shallow",
      "Check get_server_limits for size constraints before preparing large contexts"
    ]
  }
}
